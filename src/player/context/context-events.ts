import {Player, PlayerDisconnectReasons, Actor, Weapons, Vehicle, SampObject, Pickup, Position, TextDraw, PlayerTextDraw, BulletHitTypes, ClickSources, DialogResponse, EditObjectResponse, PlayerStates, SelectObjectTypes, CommandList} from "../..";

export interface ContextEvents {
    onActorStreamIn(actor: Actor): any;
    onActorStreamOut(actor: Actor): any;
    onConnect(): any;
    onDisconnect(reason: PlayerDisconnectReasons): any;
    onSpawn(): any;
    onDeath(killer: Player, reason: Weapons): any;
    onText(text: string): any;
    onCommandText(cmdText: string): any;
    onRequestClass(classId: number): any;
    onEnterVehicle(vehicle: Vehicle, isPassenger: boolean): any;
    onExitVehicle(vehicle: Vehicle): any;
    onStateChange(newState: PlayerStates, oldState: PlayerStates): any;
    onEnterCheckpoint(): any;
    onLeaveCheckpoint(): any;
    onEnterRaceCheckpoint(): any;
    onLeaveRaceCheckpoint(): any;
    onRequestSpawn(): any;
    onObjectMoved(object: SampObject): any;
    onPickUpPickup(pickup: Pickup): any;
    onEnterExitModShop(entered: boolean, interior: number): any;
    onSelectedMenuRow(row: number): any;
    onExitedMenu(): any;
    onInteriorChange(newInterior: number, oldInterior: number): any;
    onKeyStateChange(newKeys: number, oldKeys: number): any;
    onUpdate(): any;
    onStreamIn(forPlayer: Player): any;
    onStreamOut(forPlayer: Player): any;
    onDialogResponse(response: DialogResponse): any;
    onTakeDamage(issuer: Player, amount: number, weapon: Weapons, bodyPart: number): any;
    onGiveDamage(damaged: Player, amount: number, weapon: Weapons, bodyPart: number): any;
    onGiveDamageActor(damaged: Actor, amount: number, weapon: Weapons, bodyPart: number): any;
    onClickMap(pos: Position): any;
    onClickTextDraw(clicked: TextDraw): any;
    onClickPlayerTextDraw(clicked: PlayerTextDraw): any;
    onIncomingConnection(ip: string, port: number): any;
    onTrailerUpdate(vehicle: Vehicle): any;
    onClickPlayer(clicked: Player, source: ClickSources): any;
    onEditObject(isPlayerObject: boolean, object: SampObject, response: EditObjectResponse, offset: Position, rot: Position): any;
    onEditAttachedObject(response: boolean, index: number, model: number, bone: number, offset: Position, rot: Position, scale: Position): any;
    onSelectObject(type: SelectObjectTypes, object: SampObject, model: number, pos: Position): any;
    onWeaponShot(weapon: Weapons, hitType: BulletHitTypes, hitId: number, coord: Position): any;
    onVehicleDeath(vehicle: Vehicle): any;
    onVehicleMod(vehicle: Vehicle, component: number): any;
    onVehiclePaintjob(vehicle: Vehicle, paintjob: number): any;
    onVehicleRespray(vehicle: Vehicle, colors: [number, number]): any;
    onVehicleDamageStatusUpdate(vehicle: Vehicle): any;
    onUnoccupiedVehicleUpdate(vehicle: Vehicle, passengerSeat: number, newPos: Position, velocityPos: Position): any;
    onVehicleStreamIn(vehicle: Vehicle): any;
    onVehicleStreamOut(vehicle: Vehicle): any;
    onVehicleSirenStateChange(vehicle: Vehicle, state: boolean): any;
    onCommandInvalid(): any;
    onCommandNotFound(name: string): any;
    onCommandParamsMismatch(cmdList: CommandList): any;
}